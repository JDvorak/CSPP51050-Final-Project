- Presentation
	- Simple web GUI that allows users to run and view analyses in a human readable format
	- responsibilities: make the app human readable by non-technical people

- Control
	- Provide the presentation with a meaningful client on which it can call methods to analyze the data
	- responsibilities: define the set of controls for the user
	- interface with analysis layer
	- design pattern => facade
							- simplify the analysis steps, i.e. string together the order

- Analysis
	- Perform an analysis on an object and produce some sort of "analyzed object", may be a separate object
	- responsibilities: determining the "result" attributes of objects
	- responsible for fetching its own data from the layer below
	- design pattern => pipes and filters
							- each different analysis should accept and return the same object, modified to include the results of the analysis

- Data Model
	- Responsible for assembling model objects for use in the analysis layer
	- Model objects are assembled either from a database or an API call (or both?)
	- design pattern => TBD

- Database (optional)
	- store the data
	- maybe the Data Fetching Layer writes to a database?
	- maybe the Data Model reads from the database?
	- maybe the Data Model and data fetching layer don't know each other at all?
	- maybe the above is a good idea

- Data Fetching Layer
	- Get the data from FRED api
	- pass the data to the data model, maybe in a structured way, maybe in an unstructured way
	- maybe convert all to JSON (trivial if API already gives JSON, non-trivial if one gives XML, the other JSON, etc.)